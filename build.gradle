// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {

    ext.kotlin_version = '1.2.31'

    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.0.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        google()
        jcenter()
    }
}
project.ext {
    compileSdkVersion = 27
    minSdkVersion = 15
    targetSdkVersion = 27
    versionCode = 2
    versionName = "1.0.2"
}
ext {
    def lastCommitTitle = getLastCommitMsg()
    hasReleasePhase = lastCommitTitle.contains('[release-this]')
    hasPreReleasePhase = lastCommitTitle.contains('[pre-release-this]')
}

static String getLastCommitMsg() {
    // Get last commit title info
    def systemOutStream = new ByteArrayOutputStream()
    def command = 'git log -1 --no-merges --pretty=format:"%s"'
    command.execute().waitForProcessOutput(systemOutStream, System.err)
    return systemOutStream.toString()
}

task assembleMultiPlatform(type: Copy) {
    from "./apks"
    include "demo-v1-release-jenkins(*).apk"
    into "./jenkins/release"
    rename "demo-v1-release-jenkins(.*).apk", "release.apk"
    doLast {
        println 'assembleRelease success now copy to jenkins for further operations'
        def scriptPath = "./jenkins/release.sh"
        def releaseFlag = hasPreReleasePhase ? '--pre-release' : '--release'
        exec {
            commandLine "sh", scriptPath, "1", "1.0.0", releaseFlag
        }
    }
    dependsOn(":app:assembleRelease")
}

task testAssembleMultiPlatform(type: Copy) {
    exec {
        commandLine "sh", "./jenkins/release.sh"
        commandLine "sh", "./jenkins/changelog.sh"
    }
    dependsOn(":jenkins:notifyChangelog")
//    dependsOn(":jenkins:assembleReleaseRun")
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
